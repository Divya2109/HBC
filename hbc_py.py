# -*- coding: utf-8 -*-
"""hbc.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PPP0mJyNpwf3VAgDVCnj3KsYmk5FpAEW
"""



import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('/content/hotel_bookings.csv')
df.head()

df.shape

def data_clean(df):
  df.fillna(0,inplace=True)
print(df.isnull().sum())
data_clean(df)

df.columns

list=['adults','children','babies']
for i in list:
  print('{} has unique value as {}'.format(i,df[i].unique()))

filter = (df.children ==0) & (df.adults ==0) & (df.babies ==0)
df[filter]

pd.set_option('display.max_columns',32)
filter=(df.children ==0) & (df.adults ==0) & (df.babies ==0)
df[filter]

df[~filter]

data=df[~filter]
data.head()

country_wise_data=data[data['is_canceled']==0]['country'].value_counts().reset_index()
country_wise_data.columns=['country','No of guests']
country_wise_data

!pip install folium

import folium
from folium.plugins import HeatMap
basemap = folium.Map()
!pip install plotly
import plotly.express as px

basemap = folium.Map()
guests_map = px.choropleth(country_wise_data, locations =country_wise_data['country'],
                         color = country_wise_data['No of guests'], hover_name = country_wise_data['country'])
guests_map.show()

data.head()

data2=data[data['is_canceled']==0]
data2.columns

plt.figure(figsize=(12,8))
sns.boxplot(x='reserved_room_type',
y='adr', hue='hotel',
data=data2) 
plt.title('Price of room types per night & per person')
plt.xlabel('Room type')
plt.ylabel('price(Euro)')
plt.legend()
plt.show()

data_resort=df[(df['hotel'] == 'Resort Hotel') & (df['is_canceled']==0)]
data_city = df[(df['hotel'] == 'City Hotel') & (df['is_canceled']==0)]

resort_hotel=data_resort.groupby(['arrival_date_month'])['adr'].mean().reset_index()
resort_hotel

city_hotel=data_city.groupby(['arrival_date_month'])['adr'].mean().reset_index()
city_hotel

final=resort_hotel.merge(city_hotel,on='arrival_date_month')
final.columns=['month','price_for_resort','price_for_cityhotel']
final

!pip install sort-dataframeby-monthorweek
!pip install sorted-months-weekdays

import sort_dataframeby_monthorweek as sd

def sort_data(df,colname):
  return sd.Sort_Dataframeby_Month(df,colname)

final = sort_data(final,'month')
final

final.columns

px.line(final, x='month', y= ['month', 'price_for_resort', 'price_for_cityhotel'],title='Room price  per night over months')

data_resort.head()

rush_resort=data_resort['arrival_date_month'].value_counts().reset_index()
rush_resort.columns=['month','no of guests']
rush_resort

rush_city=data_city['arrival_date_month'].value_counts().reset_index()
rush_city.columns=['month','no of guests']
rush_city

final_rush=rush_resort.merge(rush_city,on='month')
final_rush
final_rush.columns=['month','no of guests on resort','no of guests in city hotel']

final_rush=sort_data(final_rush,'month')
final_rush

final_rush.columns

px.line(final_rush,x='month',y=['month', 'no of guests on resort', 'no of guests in city hotel'],title='Total no of gustes per month')

data.head()

data.corr()

data.corr()['is_canceled']

data.corr().sort_values('is_canceled',ascending=False)

data.groupby('is_canceled')['reservation_status'].value_counts()

list_not=['days_in_waiting_list','arival_date_year']
num_features=[col for col in data.columns if data[col].dtype!='0'and col not in list_not]
num_features

cols=[]
for col in data.columns:
   if data[col].dtype!='0'and col not in list_not:
     cols.append(col)
cols

data.columns

cat_not=['arival_date_year','assigned_room_type','booking_changes','reservation_status','country','days_in_waiting_list']
cat_not

cat_features=[col for col in data.columns if data[col].dtype!='0'and col not in list_not]
cat_features

data_cat=data[cat_features]
data_cat.head()

data_cat.dtypes

import warnings
from warnings import filterwarnings
filterwarnings('ignore')

data_cat['reservation_status_date']=pd.to_datetime(data_cat['reservation_status_date'])
data_cat['year']=data_cat['reservation_status_date'] .dt.year
data_cat['month']=data_cat['reservation_status_date'].dt.month
data_cat['day']=data_cat['reservation_status_date'] .dt.day
data_cat.head()

data.dtypes

data_cat.drop('reservation_status_date',axis=1,inplace=True)

data_cat['cancellation']=data['is_canceled']

data_cat.head()

data_cat['cancellation']=data_cat['is_canceled']
data_cat.head()
data_cat['market_segment'].unique()

cols=data_cat.columns[0:8]
cols

data_cat['hotel']

data_cat.groupby(['hotel'])['cancellation'].mean()

for col in cols:
  print(data_cat.groupby([col])['cancellation'].mean().to_dict())
  print('\n')

for col in cols:
  dict=data_cat.groupby([col])['cancellation'].mean().to_dict()
  data_cat[col]=data_cat[col].map(dict)

data_cat.head()

dataframe=pd.concat([data_cat,data[num_features]],axis=1)
dataframe.head()

dataframe=pd.concat([data_cat,data[num_features]],axis=1)
dataframe.head()
dataframe.drop('cancellation',axis=1,inplace=True)
dataframe.shape

dataframe.head()

sns.distplot(dataframe['lead_time'])

import numpy as np
def handle_outlier(col):
  dataframe[col]=np.log1p(dataframe[col])
handle_outlier ('lead_time')
sns.distplot(dataframe['lead_time'])

##adr

sns.displot(dataframe['adr'])

handle_outlier('adr')

sns.distplot(dataframe['adr'].dropna())

dataframe.isnull().sum()

dataframe.dropna(inplace=True)
dataframe.drop('is_canceled',axis=1)







